"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cosmic-analytics";
exports.ids = ["vendor-chunks/cosmic-analytics"];
exports.modules = {

/***/ "(rsc)/./node_modules/cosmic-analytics/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/cosmic-analytics/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CosmicAnalytics: () => (/* binding */ CosmicAnalytics),\n/* harmony export */   CosmicAnalyticsProvider: () => (/* binding */ CosmicAnalyticsProvider),\n/* harmony export */   getAnalytics: () => (/* binding */ getAnalytics),\n/* harmony export */   getReferrerSource: () => (/* binding */ getReferrerSource),\n/* harmony export */   initAnalytics: () => (/* binding */ initAnalytics),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   parseUserAgent: () => (/* binding */ parseUserAgent),\n/* harmony export */   useCosmicAnalytics: () => (/* binding */ useCosmicAnalytics)\n/* harmony export */ });\n/* harmony import */ var react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-webpack-server.js\");\n// This file is generated by the Webpack next-flight-loader.\n\nconst CosmicAnalytics = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call CosmicAnalytics() from the server but CosmicAnalytics is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\Akif Khan\\\\OneDrive\\\\Desktop\\\\Farmseva- site\\\\node_modules\\\\cosmic-analytics\\\\dist\\\\index.mjs\",\n\"CosmicAnalytics\",\n);const CosmicAnalyticsProvider = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call CosmicAnalyticsProvider() from the server but CosmicAnalyticsProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\Akif Khan\\\\OneDrive\\\\Desktop\\\\Farmseva- site\\\\node_modules\\\\cosmic-analytics\\\\dist\\\\index.mjs\",\n\"CosmicAnalyticsProvider\",\n);const getAnalytics = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call getAnalytics() from the server but getAnalytics is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\Akif Khan\\\\OneDrive\\\\Desktop\\\\Farmseva- site\\\\node_modules\\\\cosmic-analytics\\\\dist\\\\index.mjs\",\n\"getAnalytics\",\n);const getReferrerSource = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call getReferrerSource() from the server but getReferrerSource is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\Akif Khan\\\\OneDrive\\\\Desktop\\\\Farmseva- site\\\\node_modules\\\\cosmic-analytics\\\\dist\\\\index.mjs\",\n\"getReferrerSource\",\n);const initAnalytics = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call initAnalytics() from the server but initAnalytics is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\Akif Khan\\\\OneDrive\\\\Desktop\\\\Farmseva- site\\\\node_modules\\\\cosmic-analytics\\\\dist\\\\index.mjs\",\n\"initAnalytics\",\n);const isBrowser = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call isBrowser() from the server but isBrowser is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\Akif Khan\\\\OneDrive\\\\Desktop\\\\Farmseva- site\\\\node_modules\\\\cosmic-analytics\\\\dist\\\\index.mjs\",\n\"isBrowser\",\n);const parseUserAgent = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call parseUserAgent() from the server but parseUserAgent is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\Akif Khan\\\\OneDrive\\\\Desktop\\\\Farmseva- site\\\\node_modules\\\\cosmic-analytics\\\\dist\\\\index.mjs\",\n\"parseUserAgent\",\n);const useCosmicAnalytics = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call useCosmicAnalytics() from the server but useCosmicAnalytics is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\Akif Khan\\\\OneDrive\\\\Desktop\\\\Farmseva- site\\\\node_modules\\\\cosmic-analytics\\\\dist\\\\index.mjs\",\n\"useCosmicAnalytics\",\n);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY29zbWljLWFuYWx5dGljcy9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSIsInNvdXJjZXMiOlsiX05fRS8uL25vZGVfbW9kdWxlcy9jb3NtaWMtYW5hbHl0aWNzL2Rpc3QvaW5kZXgubWpzL19fbmV4dGpzLWludGVybmFsLXByb3h5Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IHRoZSBXZWJwYWNrIG5leHQtZmxpZ2h0LWxvYWRlci5cbmltcG9ydCB7IHJlZ2lzdGVyQ2xpZW50UmVmZXJlbmNlIH0gZnJvbSBcInJlYWN0LXNlcnZlci1kb20td2VicGFjay9zZXJ2ZXJcIjtcbmV4cG9ydCBjb25zdCBDb3NtaWNBbmFseXRpY3MgPSByZWdpc3RlckNsaWVudFJlZmVyZW5jZShcbmZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0ZWQgdG8gY2FsbCBDb3NtaWNBbmFseXRpY3MoKSBmcm9tIHRoZSBzZXJ2ZXIgYnV0IENvc21pY0FuYWx5dGljcyBpcyBvbiB0aGUgY2xpZW50LiBJdCdzIG5vdCBwb3NzaWJsZSB0byBpbnZva2UgYSBjbGllbnQgZnVuY3Rpb24gZnJvbSB0aGUgc2VydmVyLCBpdCBjYW4gb25seSBiZSByZW5kZXJlZCBhcyBhIENvbXBvbmVudCBvciBwYXNzZWQgdG8gcHJvcHMgb2YgYSBDbGllbnQgQ29tcG9uZW50LlwiKTsgfSxcblwiQzpcXFxcVXNlcnNcXFxcQWtpZiBLaGFuXFxcXE9uZURyaXZlXFxcXERlc2t0b3BcXFxcRmFybXNldmEtIHNpdGVcXFxcbm9kZV9tb2R1bGVzXFxcXGNvc21pYy1hbmFseXRpY3NcXFxcZGlzdFxcXFxpbmRleC5tanNcIixcblwiQ29zbWljQW5hbHl0aWNzXCIsXG4pO2V4cG9ydCBjb25zdCBDb3NtaWNBbmFseXRpY3NQcm92aWRlciA9IHJlZ2lzdGVyQ2xpZW50UmVmZXJlbmNlKFxuZnVuY3Rpb24oKSB7IHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byBjYWxsIENvc21pY0FuYWx5dGljc1Byb3ZpZGVyKCkgZnJvbSB0aGUgc2VydmVyIGJ1dCBDb3NtaWNBbmFseXRpY3NQcm92aWRlciBpcyBvbiB0aGUgY2xpZW50LiBJdCdzIG5vdCBwb3NzaWJsZSB0byBpbnZva2UgYSBjbGllbnQgZnVuY3Rpb24gZnJvbSB0aGUgc2VydmVyLCBpdCBjYW4gb25seSBiZSByZW5kZXJlZCBhcyBhIENvbXBvbmVudCBvciBwYXNzZWQgdG8gcHJvcHMgb2YgYSBDbGllbnQgQ29tcG9uZW50LlwiKTsgfSxcblwiQzpcXFxcVXNlcnNcXFxcQWtpZiBLaGFuXFxcXE9uZURyaXZlXFxcXERlc2t0b3BcXFxcRmFybXNldmEtIHNpdGVcXFxcbm9kZV9tb2R1bGVzXFxcXGNvc21pYy1hbmFseXRpY3NcXFxcZGlzdFxcXFxpbmRleC5tanNcIixcblwiQ29zbWljQW5hbHl0aWNzUHJvdmlkZXJcIixcbik7ZXhwb3J0IGNvbnN0IGdldEFuYWx5dGljcyA9IHJlZ2lzdGVyQ2xpZW50UmVmZXJlbmNlKFxuZnVuY3Rpb24oKSB7IHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byBjYWxsIGdldEFuYWx5dGljcygpIGZyb20gdGhlIHNlcnZlciBidXQgZ2V0QW5hbHl0aWNzIGlzIG9uIHRoZSBjbGllbnQuIEl0J3Mgbm90IHBvc3NpYmxlIHRvIGludm9rZSBhIGNsaWVudCBmdW5jdGlvbiBmcm9tIHRoZSBzZXJ2ZXIsIGl0IGNhbiBvbmx5IGJlIHJlbmRlcmVkIGFzIGEgQ29tcG9uZW50IG9yIHBhc3NlZCB0byBwcm9wcyBvZiBhIENsaWVudCBDb21wb25lbnQuXCIpOyB9LFxuXCJDOlxcXFxVc2Vyc1xcXFxBa2lmIEtoYW5cXFxcT25lRHJpdmVcXFxcRGVza3RvcFxcXFxGYXJtc2V2YS0gc2l0ZVxcXFxub2RlX21vZHVsZXNcXFxcY29zbWljLWFuYWx5dGljc1xcXFxkaXN0XFxcXGluZGV4Lm1qc1wiLFxuXCJnZXRBbmFseXRpY3NcIixcbik7ZXhwb3J0IGNvbnN0IGdldFJlZmVycmVyU291cmNlID0gcmVnaXN0ZXJDbGllbnRSZWZlcmVuY2UoXG5mdW5jdGlvbigpIHsgdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdGVkIHRvIGNhbGwgZ2V0UmVmZXJyZXJTb3VyY2UoKSBmcm9tIHRoZSBzZXJ2ZXIgYnV0IGdldFJlZmVycmVyU291cmNlIGlzIG9uIHRoZSBjbGllbnQuIEl0J3Mgbm90IHBvc3NpYmxlIHRvIGludm9rZSBhIGNsaWVudCBmdW5jdGlvbiBmcm9tIHRoZSBzZXJ2ZXIsIGl0IGNhbiBvbmx5IGJlIHJlbmRlcmVkIGFzIGEgQ29tcG9uZW50IG9yIHBhc3NlZCB0byBwcm9wcyBvZiBhIENsaWVudCBDb21wb25lbnQuXCIpOyB9LFxuXCJDOlxcXFxVc2Vyc1xcXFxBa2lmIEtoYW5cXFxcT25lRHJpdmVcXFxcRGVza3RvcFxcXFxGYXJtc2V2YS0gc2l0ZVxcXFxub2RlX21vZHVsZXNcXFxcY29zbWljLWFuYWx5dGljc1xcXFxkaXN0XFxcXGluZGV4Lm1qc1wiLFxuXCJnZXRSZWZlcnJlclNvdXJjZVwiLFxuKTtleHBvcnQgY29uc3QgaW5pdEFuYWx5dGljcyA9IHJlZ2lzdGVyQ2xpZW50UmVmZXJlbmNlKFxuZnVuY3Rpb24oKSB7IHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byBjYWxsIGluaXRBbmFseXRpY3MoKSBmcm9tIHRoZSBzZXJ2ZXIgYnV0IGluaXRBbmFseXRpY3MgaXMgb24gdGhlIGNsaWVudC4gSXQncyBub3QgcG9zc2libGUgdG8gaW52b2tlIGEgY2xpZW50IGZ1bmN0aW9uIGZyb20gdGhlIHNlcnZlciwgaXQgY2FuIG9ubHkgYmUgcmVuZGVyZWQgYXMgYSBDb21wb25lbnQgb3IgcGFzc2VkIHRvIHByb3BzIG9mIGEgQ2xpZW50IENvbXBvbmVudC5cIik7IH0sXG5cIkM6XFxcXFVzZXJzXFxcXEFraWYgS2hhblxcXFxPbmVEcml2ZVxcXFxEZXNrdG9wXFxcXEZhcm1zZXZhLSBzaXRlXFxcXG5vZGVfbW9kdWxlc1xcXFxjb3NtaWMtYW5hbHl0aWNzXFxcXGRpc3RcXFxcaW5kZXgubWpzXCIsXG5cImluaXRBbmFseXRpY3NcIixcbik7ZXhwb3J0IGNvbnN0IGlzQnJvd3NlciA9IHJlZ2lzdGVyQ2xpZW50UmVmZXJlbmNlKFxuZnVuY3Rpb24oKSB7IHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byBjYWxsIGlzQnJvd3NlcigpIGZyb20gdGhlIHNlcnZlciBidXQgaXNCcm93c2VyIGlzIG9uIHRoZSBjbGllbnQuIEl0J3Mgbm90IHBvc3NpYmxlIHRvIGludm9rZSBhIGNsaWVudCBmdW5jdGlvbiBmcm9tIHRoZSBzZXJ2ZXIsIGl0IGNhbiBvbmx5IGJlIHJlbmRlcmVkIGFzIGEgQ29tcG9uZW50IG9yIHBhc3NlZCB0byBwcm9wcyBvZiBhIENsaWVudCBDb21wb25lbnQuXCIpOyB9LFxuXCJDOlxcXFxVc2Vyc1xcXFxBa2lmIEtoYW5cXFxcT25lRHJpdmVcXFxcRGVza3RvcFxcXFxGYXJtc2V2YS0gc2l0ZVxcXFxub2RlX21vZHVsZXNcXFxcY29zbWljLWFuYWx5dGljc1xcXFxkaXN0XFxcXGluZGV4Lm1qc1wiLFxuXCJpc0Jyb3dzZXJcIixcbik7ZXhwb3J0IGNvbnN0IHBhcnNlVXNlckFnZW50ID0gcmVnaXN0ZXJDbGllbnRSZWZlcmVuY2UoXG5mdW5jdGlvbigpIHsgdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdGVkIHRvIGNhbGwgcGFyc2VVc2VyQWdlbnQoKSBmcm9tIHRoZSBzZXJ2ZXIgYnV0IHBhcnNlVXNlckFnZW50IGlzIG9uIHRoZSBjbGllbnQuIEl0J3Mgbm90IHBvc3NpYmxlIHRvIGludm9rZSBhIGNsaWVudCBmdW5jdGlvbiBmcm9tIHRoZSBzZXJ2ZXIsIGl0IGNhbiBvbmx5IGJlIHJlbmRlcmVkIGFzIGEgQ29tcG9uZW50IG9yIHBhc3NlZCB0byBwcm9wcyBvZiBhIENsaWVudCBDb21wb25lbnQuXCIpOyB9LFxuXCJDOlxcXFxVc2Vyc1xcXFxBa2lmIEtoYW5cXFxcT25lRHJpdmVcXFxcRGVza3RvcFxcXFxGYXJtc2V2YS0gc2l0ZVxcXFxub2RlX21vZHVsZXNcXFxcY29zbWljLWFuYWx5dGljc1xcXFxkaXN0XFxcXGluZGV4Lm1qc1wiLFxuXCJwYXJzZVVzZXJBZ2VudFwiLFxuKTtleHBvcnQgY29uc3QgdXNlQ29zbWljQW5hbHl0aWNzID0gcmVnaXN0ZXJDbGllbnRSZWZlcmVuY2UoXG5mdW5jdGlvbigpIHsgdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdGVkIHRvIGNhbGwgdXNlQ29zbWljQW5hbHl0aWNzKCkgZnJvbSB0aGUgc2VydmVyIGJ1dCB1c2VDb3NtaWNBbmFseXRpY3MgaXMgb24gdGhlIGNsaWVudC4gSXQncyBub3QgcG9zc2libGUgdG8gaW52b2tlIGEgY2xpZW50IGZ1bmN0aW9uIGZyb20gdGhlIHNlcnZlciwgaXQgY2FuIG9ubHkgYmUgcmVuZGVyZWQgYXMgYSBDb21wb25lbnQgb3IgcGFzc2VkIHRvIHByb3BzIG9mIGEgQ2xpZW50IENvbXBvbmVudC5cIik7IH0sXG5cIkM6XFxcXFVzZXJzXFxcXEFraWYgS2hhblxcXFxPbmVEcml2ZVxcXFxEZXNrdG9wXFxcXEZhcm1zZXZhLSBzaXRlXFxcXG5vZGVfbW9kdWxlc1xcXFxjb3NtaWMtYW5hbHl0aWNzXFxcXGRpc3RcXFxcaW5kZXgubWpzXCIsXG5cInVzZUNvc21pY0FuYWx5dGljc1wiLFxuKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cosmic-analytics/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/cosmic-analytics/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/cosmic-analytics/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CosmicAnalytics: () => (/* binding */ CosmicAnalytics),\n/* harmony export */   CosmicAnalyticsProvider: () => (/* binding */ CosmicAnalyticsProvider),\n/* harmony export */   getAnalytics: () => (/* binding */ getAnalytics),\n/* harmony export */   getReferrerSource: () => (/* binding */ getReferrerSource),\n/* harmony export */   initAnalytics: () => (/* binding */ initAnalytics),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   parseUserAgent: () => (/* binding */ parseUserAgent),\n/* harmony export */   useCosmicAnalytics: () => (/* binding */ useCosmicAnalytics)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/navigation */ \"(ssr)/./node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* __next_internal_client_entry_do_not_use__ CosmicAnalytics,CosmicAnalyticsProvider,getAnalytics,getReferrerSource,initAnalytics,isBrowser,parseUserAgent,useCosmicAnalytics auto */ // src/client/useCosmicAnalytics.ts\n\n\n// src/lib/utils.ts\nfunction generateSessionId() {\n    return `${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;\n}\nfunction isBrowser() {\n    return  false && 0;\n}\nfunction isDoNotTrackEnabled() {\n    if (!isBrowser()) return false;\n    const { doNotTrack, navigator: navigator2 } = window;\n    const dnt = doNotTrack || navigator2.doNotTrack || navigator2.msDoNotTrack;\n    return dnt === \"1\" || dnt === \"yes\";\n}\nfunction parseUserAgent(userAgent) {\n    const ua = userAgent.toLowerCase();\n    let type = \"desktop\";\n    if (/tablet|ipad|playbook|silk/i.test(ua)) {\n        type = \"tablet\";\n    } else if (/mobile|iphone|ipod|android|blackberry|opera|mini|windows\\sce|palm|smartphone|iemobile/i.test(ua)) {\n        type = \"mobile\";\n    }\n    let os = \"Unknown\";\n    if (/windows nt 10/i.test(ua)) os = \"Windows 10\";\n    else if (/windows nt 6.3/i.test(ua)) os = \"Windows 8.1\";\n    else if (/windows nt 6.2/i.test(ua)) os = \"Windows 8\";\n    else if (/windows nt 6.1/i.test(ua)) os = \"Windows 7\";\n    else if (/windows/i.test(ua)) os = \"Windows\";\n    else if (/android/i.test(ua)) os = \"Android\";\n    else if (/iphone|ipad|ipod/i.test(ua)) os = \"iOS\";\n    else if (/mac os x/i.test(ua)) os = \"macOS\";\n    else if (/linux/i.test(ua)) os = \"Linux\";\n    else if (/chromeos/i.test(ua)) os = \"Chrome OS\";\n    let browser = \"Unknown\";\n    let browserVersion = \"\";\n    if (/edg\\//i.test(ua)) {\n        browser = \"Edge\";\n        const match = ua.match(/edg\\/(\\d+(\\.\\d+)*)/);\n        if (match) browserVersion = match[1];\n    } else if (/chrome|crios/i.test(ua) && !/edg/i.test(ua)) {\n        browser = \"Chrome\";\n        const match = ua.match(/chrome\\/(\\d+(\\.\\d+)*)/);\n        if (match) browserVersion = match[1];\n    } else if (/firefox|fxios/i.test(ua)) {\n        browser = \"Firefox\";\n        const match = ua.match(/firefox\\/(\\d+(\\.\\d+)*)/);\n        if (match) browserVersion = match[1];\n    } else if (/safari/i.test(ua) && !/chrome|crios/i.test(ua)) {\n        browser = \"Safari\";\n        const match = ua.match(/version\\/(\\d+(\\.\\d+)*)/);\n        if (match) browserVersion = match[1];\n    } else if (/opera|opr/i.test(ua)) {\n        browser = \"Opera\";\n        const match = ua.match(/(?:opera|opr)\\/(\\d+(\\.\\d+)*)/);\n        if (match) browserVersion = match[1];\n    }\n    return {\n        type,\n        os,\n        browser,\n        browserVersion\n    };\n}\nfunction getViewport() {\n    if (!isBrowser()) return \"\";\n    return `${window.innerWidth}x${window.innerHeight}`;\n}\nfunction getScreenResolution() {\n    if (!isBrowser()) return \"\";\n    return `${window.screen.width}x${window.screen.height}`;\n}\nfunction getReferrerSource(referrer) {\n    if (!referrer || referrer === \"\") return \"direct\";\n    try {\n        const url = new URL(referrer);\n        const hostname = url.hostname.replace(\"www.\", \"\");\n        if (hostname.includes(\"facebook.com\") || hostname.includes(\"fb.com\")) return \"facebook\";\n        if (hostname.includes(\"twitter.com\") || hostname.includes(\"t.co\")) return \"twitter\";\n        if (hostname.includes(\"linkedin.com\")) return \"linkedin\";\n        if (hostname.includes(\"instagram.com\")) return \"instagram\";\n        if (hostname.includes(\"youtube.com\")) return \"youtube\";\n        if (hostname.includes(\"reddit.com\")) return \"reddit\";\n        if (hostname.includes(\"google.\")) return \"google\";\n        if (hostname.includes(\"bing.com\")) return \"bing\";\n        if (hostname.includes(\"yahoo.\")) return \"yahoo\";\n        if (hostname.includes(\"duckduckgo.com\")) return \"duckduckgo\";\n        if (hostname.includes(\"baidu.com\")) return \"baidu\";\n        return hostname;\n    } catch  {\n        return \"invalid\";\n    }\n}\nfunction safeJsonParse(json, fallback) {\n    try {\n        return JSON.parse(json);\n    } catch  {\n        return fallback;\n    }\n}\n// src/lib/analytics.ts\nvar SESSION_TIMEOUT = 30 * 60 * 1e3;\nvar SESSION_STORAGE_KEY = \"cosmic_analytics_session\";\nvar CosmicAnalytics = class {\n    constructor(config){\n        this.session = null;\n        this.pageViewStart = 0;\n        this.isEnabled = true;\n        this.queue = [];\n        this.flushTimer = null;\n        this.config = {\n            apiEndpoint: \"https://api.cosmic.new/analytics\",\n            debug: false,\n            enabled: true,\n            respectDoNotTrack: true,\n            sendInDevelopment: false,\n            ...config\n        };\n        this.projectId = this.config.projectId || this.getProjectId();\n        this.apiEndpoint = this.config.apiEndpoint;\n        this.isEnabled = this.shouldEnableAnalytics();\n        if (this.isEnabled && isBrowser()) {\n            this.initializeSession();\n            this.setupEventListeners();\n            this.startFlushTimer();\n        }\n    }\n    getProjectId() {\n        return \"\";\n    }\n    isDevelopmentMode() {\n        if (typeof this.config.isDevelopment === \"boolean\") {\n            return this.config.isDevelopment;\n        }\n        if (typeof globalThis.process !== \"undefined\") {\n            return globalThis.process.env?.NODE_ENV === \"development\";\n        }\n        if (isBrowser()) {\n            if (window.__NEXT_DATA__?.buildId === \"development\") {\n                return true;\n            }\n            const hostname = window.location.hostname;\n            return hostname === \"localhost\" || hostname === \"127.0.0.1\" || hostname.includes(\".local\");\n        }\n        return false;\n    }\n    shouldEnableAnalytics() {\n        if (!this.config.enabled) return false;\n        if (!this.projectId) {\n            if (this.config.debug) {\n                console.warn(\"Cosmic Analytics: NEXT_PUBLIC_CLIENT_ID not found\");\n            }\n            return false;\n        }\n        if (this.isDevelopmentMode() && !this.config.sendInDevelopment) {\n            if (this.config.debug) {\n                console.log(\"Cosmic Analytics: Disabled in development mode. Set sendInDevelopment: true to enable.\");\n            }\n            return false;\n        }\n        if (this.config.respectDoNotTrack && isDoNotTrackEnabled()) {\n            if (this.config.debug) {\n                console.log(\"Cosmic Analytics: Respecting Do Not Track preference\");\n            }\n            return false;\n        }\n        return true;\n    }\n    initializeSession() {\n        const storedSession = this.getStoredSession();\n        if (storedSession && this.isSessionValid(storedSession)) {\n            this.session = storedSession;\n            this.session.lastActivity = Date.now();\n        } else {\n            this.session = {\n                id: generateSessionId(),\n                startTime: Date.now(),\n                pageViews: 0,\n                lastActivity: Date.now()\n            };\n        }\n        this.saveSession();\n    }\n    getStoredSession() {\n        if (!isBrowser()) return null;\n        try {\n            const stored = sessionStorage.getItem(SESSION_STORAGE_KEY);\n            if (!stored) return null;\n            return safeJsonParse(stored, null);\n        } catch  {\n            return null;\n        }\n    }\n    isSessionValid(session) {\n        const now = Date.now();\n        return now - session.lastActivity < SESSION_TIMEOUT;\n    }\n    saveSession() {\n        if (!isBrowser() || !this.session) return;\n        try {\n            sessionStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(this.session));\n        } catch (error) {\n            if (this.config.debug) {\n                console.error(\"Cosmic Analytics: Failed to save session\", error);\n            }\n        }\n    }\n    setupEventListeners() {\n        if (!isBrowser()) return;\n        document.addEventListener(\"visibilitychange\", ()=>{\n            if (document.visibilityState === \"hidden\") {\n                this.trackPageExit();\n                this.flush(true);\n            } else if (document.visibilityState === \"visible\") {\n                this.trackPageView();\n            }\n        });\n        window.addEventListener(\"beforeunload\", ()=>{\n            this.trackPageExit();\n            this.flush(true);\n        });\n    }\n    startFlushTimer() {\n        this.flushTimer = setInterval(()=>{\n            this.flush();\n        }, 5e3);\n    }\n    stopFlushTimer() {\n        if (this.flushTimer) {\n            clearInterval(this.flushTimer);\n            this.flushTimer = null;\n        }\n    }\n    addToQueue(event) {\n        this.queue.push(event);\n        if (this.queue.length >= 10) {\n            this.flush();\n        }\n    }\n    async flush(forceSendNow = false) {\n        if (this.queue.length === 0) return;\n        const events = [\n            ...this.queue\n        ];\n        this.queue = [];\n        try {\n            const response = await fetch(`${this.apiEndpoint}/track`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    events\n                }),\n                keepalive: forceSendNow\n            });\n            if (!response.ok && this.config.debug) {\n                console.error(\"Cosmic Analytics: Failed to send events\", response.status);\n                this.queue.unshift(...events);\n            }\n        } catch (error) {\n            if (this.config.debug) {\n                console.error(\"Cosmic Analytics: Error sending events\", error);\n            }\n            this.queue.unshift(...events);\n        }\n    }\n    trackPageView(overrides) {\n        if (!this.isEnabled || !isBrowser() || !this.session) return;\n        this.pageViewStart = Date.now();\n        this.session.pageViews++;\n        this.session.lastActivity = Date.now();\n        this.saveSession();\n        const event = {\n            event: \"pageview\",\n            projectId: this.projectId,\n            sessionId: this.session.id,\n            url: window.location.href,\n            title: document.title,\n            referrer: document.referrer || \"direct\",\n            timestamp: Date.now(),\n            screenResolution: getScreenResolution(),\n            viewport: getViewport(),\n            language: navigator.language,\n            userAgent: navigator.userAgent,\n            ...overrides\n        };\n        if (this.config.debug) {\n            console.log(\"Cosmic Analytics: Page view\", event);\n        }\n        this.addToQueue(event);\n    }\n    trackPageExit() {\n        if (!this.isEnabled || !isBrowser() || !this.session || !this.pageViewStart) return;\n        const duration = Date.now() - this.pageViewStart;\n        const event = {\n            event: \"pageexit\",\n            projectId: this.projectId,\n            sessionId: this.session.id,\n            url: window.location.href,\n            duration,\n            timestamp: Date.now()\n        };\n        if (this.config.debug) {\n            console.log(\"Cosmic Analytics: Page exit\", event);\n        }\n        this.addToQueue(event);\n    }\n    reset() {\n        if (!isBrowser()) return;\n        this.session = null;\n        sessionStorage.removeItem(SESSION_STORAGE_KEY);\n        if (this.isEnabled) {\n            this.initializeSession();\n        }\n    }\n    disable() {\n        this.isEnabled = false;\n        this.stopFlushTimer();\n        this.queue = [];\n    }\n    enable() {\n        this.isEnabled = this.shouldEnableAnalytics();\n        if (this.isEnabled && isBrowser()) {\n            this.initializeSession();\n            this.startFlushTimer();\n        }\n    }\n};\n// src/client/useCosmicAnalytics.ts\nvar analyticsInstance = null;\nfunction initAnalytics(config) {\n    if (!analyticsInstance) {\n        analyticsInstance = new CosmicAnalytics(config);\n    }\n    return analyticsInstance;\n}\nfunction getAnalytics() {\n    return analyticsInstance;\n}\nfunction useCosmicAnalytics(config) {\n    const pathname = (0,next_navigation__WEBPACK_IMPORTED_MODULE_1__.usePathname)();\n    const initializedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const prevUrlRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useCosmicAnalytics.useEffect\": ()=>{\n            if (!initializedRef.current) {\n                initAnalytics(config);\n                initializedRef.current = true;\n            }\n            const analytics = getAnalytics();\n            if (!analytics) return;\n            const currentUrl =  false ? 0 : pathname;\n            if (prevUrlRef.current !== currentUrl) {\n                analytics.trackPageView();\n                prevUrlRef.current = currentUrl;\n            }\n            return ({\n                \"useCosmicAnalytics.useEffect\": ()=>{\n                    analytics.trackPageExit();\n                }\n            })[\"useCosmicAnalytics.useEffect\"];\n        }\n    }[\"useCosmicAnalytics.useEffect\"], [\n        pathname,\n        config\n    ]);\n}\n// src/client/CosmicAnalyticsProvider.tsx\n\nfunction CosmicAnalyticsProvider({ children, config }) {\n    const projectId = process.env.NEXT_PUBLIC_CLIENT_ID;\n    const isDevelopment = \"development\" === \"development\";\n    const mergedConfig = {\n        projectId,\n        isDevelopment,\n        ...config\n    };\n    useCosmicAnalytics(mergedConfig);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n        children\n    });\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cosmic-analytics/dist/index.mjs\n");

/***/ })

};
;